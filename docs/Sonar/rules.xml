<rules>
  <rule key="com.puppycrawl.tools.checkstyle.checks.metrics.JavaNCSSCheck" priority="MAJOR">
    <name><![CDATA[JavaNCSS]]></name>
    <configKey><![CDATA[Checker/TreeWalker/JavaNCSS]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[ Determines complexity of methods, classes and files by counting the Non Commenting Source Statements (NCSS). This check adheres to the  specification for the JavaNCSS-Tool  written by Chr. Clemens Lee.
Rougly said the NCSS metric is calculated by counting the source lines which are not comments, (nearly) equivalent to counting the semicolons and opening curly braces.
The NCSS for a class is summarized from the NCSS of all its methods, the NCSS of its nested classes and the number of member variable declarations.
The NCSS for a file is summarized from the ncss of all its top level classes, the number of imports and the package declaration.
<br>
Rationale: Too large methods and classes are hard to read and costly to maintain. A large NCSS number often means that a method or class has too many responsabilities and/or functionalities which should be decomposed into smaller units.]]></description>
    <param key="methodMaximum" type="i">
      <description><![CDATA[the maximum allowed number of non commenting lines in a method. Default is 50.]]></description>
    </param>
    <param key="classMaximum" type="i">
      <description><![CDATA[the maximum allowed number of non commenting lines in a class. Default is 1500.]]></description>
    </param>
    <param key="fileMaximum" type="i">
      <description><![CDATA[the maximum allowed number of non commenting lines in a file including all top level and nested classes. Default is 2000.]]></description>
    </param>
  </rule>

  <rule key="com.puppycrawl.tools.checkstyle.checks.imports.RedundantImportCheck" priority="MINOR">
    <name><![CDATA[Redundant import]]></name>
    <configKey><![CDATA[Checker/TreeWalker/RedundantImport]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks for redundant import statements. An import statement is considered redundant if:
<ul>
    <li>It is a duplicate of another import. This is, when a class is imported more than once.</li>
    <li>The class imported is from the java.lang package, e.g. importing java.lang.String.</li>
    <li>The class imported is from the same package.</li></ul>
]]></description>
  </rule>

  <rule key="com.puppycrawl.tools.checkstyle.checks.naming.AbstractClassNameCheck" priority="MAJOR">
    <name><![CDATA[Abstract Class Name]]></name>
    <configKey><![CDATA[Checker/TreeWalker/AbstractClassName]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Ensures that the names of abstract classes conforming to some regular expression.]]></description>
    <param key="format" type="r">
      <description><![CDATA[Validates identifiers for abstract classes. Default is ^Abstract.*$|^.*Factory$]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.sizes.AnonInnerLengthCheck" priority="MAJOR">
    <name><![CDATA[Anon Inner Length]]></name>
    <configKey><![CDATA[Checker/TreeWalker/AnonInnerLength]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[Checks for long anonymous inner classes.]]></description>
    <param key="max" type="i">
      <description><![CDATA[maximum allowable number of lines. Default is 20.]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.ArrayTrailingCommaCheck" priority="MAJOR">
    <name><![CDATA[Array Trailing Comma]]></name>
    <configKey><![CDATA[Checker/TreeWalker/ArrayTrailingComma]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks if array initialization contains optional trailing comma.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.ArrayTypeStyleCheck" priority="MINOR">
    <name><![CDATA[Array Type Style]]></name>
    <configKey><![CDATA[Checker/TreeWalker/ArrayTypeStyle]]></configKey>
    <category name="Usability"/>
    <description>
      <![CDATA[Checks the style of array type definitions. Some like Java-style: public static void main(String[] args) and some like C-style: public static void main(String args[])]]></description>
    <param key="javaStyle" type="b">
      <description><![CDATA[Controls whether to enforce Java style (true) or C style (false). Default is true.]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.AvoidInlineConditionalsCheck" priority="MINOR">
    <name><![CDATA[Avoid Inline Conditionals]]></name>
    <configKey><![CDATA[Checker/TreeWalker/AvoidInlineConditionals]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Detects inline conditionals.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.blocks.AvoidNestedBlocksCheck" priority="MAJOR">
    <name><![CDATA[Avoid Nested Blocks]]></name>
    <configKey><![CDATA[Checker/TreeWalker/AvoidNestedBlocks]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Finds nested blocks.]]></description>
    <param key="allowInSwitchCase" type="b">
      <description><![CDATA[Allow nested blocks in case statements. Default is false.]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.imports.AvoidStarImportCheck" priority="MINOR">
    <name><![CDATA[Avoid Star Import]]></name>
    <configKey><![CDATA[Checker/TreeWalker/AvoidStarImport]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[Check that finds import statements that use the * notation.]]></description>
    <param key="excludes" type="s{}">
      <description>
        <![CDATA[packages where star imports are allowed. Note that this property is not recursive, subpackages of excluded packages are not automatically excluded.]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.metrics.BooleanExpressionComplexityCheck" priority="MAJOR">
    <name><![CDATA[Boolean Expression Complexity]]></name>
    <configKey><![CDATA[Checker/TreeWalker/BooleanExpressionComplexity]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[Restricts nested boolean operators (&&, || and ^) to a specified depth (default = 3).]]></description>
    <param key="max" type="i">
      <description><![CDATA[the maximum allowed number of boolean operations in one expression. Default is 3.]]></description>
    </param>
    <param key="tokens" type="s[LAND,BAND,LOR,BOR,BXOR]">
      <description><![CDATA[tokens to check. Default is LAND,BAND,LOR,BOR,BXOR.]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.metrics.ClassDataAbstractionCouplingCheck" priority="MAJOR">
    <name><![CDATA[Class Data Abstraction Coupling]]></name>
    <configKey><![CDATA[Checker/TreeWalker/ClassDataAbstractionCoupling]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[This metric measures the number of instantiations of other classes within the given class.]]></description>
    <param key="max" type="i">
      <description><![CDATA[the maximum threshold allowed. Default is 7.]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.metrics.ClassFanOutComplexityCheck" priority="MAJOR">
    <name><![CDATA[Class Fan Out Complexity]]></name>
    <configKey><![CDATA[Checker/TreeWalker/ClassFanOutComplexity]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[The number of other classes a given class relies on.]]></description>
    <param key="max" type="i">
      <description><![CDATA[the maximum threshold allowed. Default is 20.]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.naming.ConstantNameCheck" priority="MINOR">
    <name><![CDATA[Constant Name]]></name>
    <configKey><![CDATA[Checker/TreeWalker/ConstantName]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks that constant names conform to a format specified by the format property.]]></description>
    <param key="format" type="r">
      <description><![CDATA[Validates identifiers for constants (static,  final fields). Default is ^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.CovariantEqualsCheck" priority="CRITICAL">
    <name><![CDATA[Covariant Equals]]></name>
    <configKey><![CDATA[Checker/TreeWalker/CovariantEquals]]></configKey>
    <category name="Reliability"/>
    <description><![CDATA[Checks that if a class defines a covariant method equals, then it defines method equals(java.lang.Object).]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.metrics.CyclomaticComplexityCheck" priority="MAJOR">
    <name><![CDATA[Cyclomatic Complexity]]></name>
    <configKey><![CDATA[Checker/TreeWalker/CyclomaticComplexity]]></configKey>
    <category name="Maintainability"/>
    <description>
      <![CDATA[Checks cyclomatic complexity of methods against a specified limit. The complexity is measured by the number of if, while, do, for, ?:, catch, switch, case  statements, and operators && and || (plus one) in the body of a constructor, method, static initializer, or instance initializer. It is a measure of the minimum number of possible paths through the source and therefore the number of required tests. Generally 1-4 is considered good, 5-7 ok, 8-10 consider re-factoring, and 11+ re-factor now !]]></description>
    <param key="max" type="i">
      <description><![CDATA[the maximum threshold allowed. Default is 10.]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.DeclarationOrderCheck" priority="INFO">
    <name><![CDATA[Declaration Order]]></name>
    <configKey><![CDATA[Checker/TreeWalker/DeclarationOrder]]></configKey>
    <category name="Usability"/>
    <description>
      <![CDATA[Checks that the parts of a class or interface declaration appear in the order suggested by the Code Convention for the Java Programming Language : <ul><li>Class (static) variables. First the public class variables, then the protected, then package level (no access modifier), and then the private.</li><li>Instance variables. First the public class variables, then the protected, then package level (no access modifier), and then the private.</li><li>Constructors</li><li>Methods</li></ul>]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.DefaultComesLastCheck" priority="MAJOR">
    <name><![CDATA[Default Comes Last]]></name>
    <configKey><![CDATA[Checker/TreeWalker/DefaultComesLast]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Check that the default is after all the cases in a switch statement.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck" priority="MINOR">
    <name><![CDATA[Design For Extension]]></name>
    <configKey><![CDATA[Checker/TreeWalker/DesignForExtension]]></configKey>
    <category name="Reliability"/>
    <description><![CDATA[Checks that classes are designed for inheritance.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.DoubleCheckedLockingCheck" priority="MAJOR">
    <name><![CDATA[Double Checked Locking]]></name>
    <configKey><![CDATA[Checker/TreeWalker/DoubleCheckedLocking]]></configKey>
    <category name="Reliability"/>
    <description>
      <![CDATA[Detect the double-checked locking idiom, a technique that tries to avoid synchronization overhead but is incorrect because of subtle artifacts of the java memory model.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.blocks.EmptyBlockCheck" priority="MAJOR">
    <name><![CDATA[Empty Block]]></name>
    <configKey><![CDATA[Checker/TreeWalker/EmptyBlock]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[Checks for empty blocks.]]></description>
    <param key="option" type="s[text,stmt]">
      <description><![CDATA[policy on block contents]]></description>
    </param>
    <param key="tokens" type="s[LITERAL_CATCH,LITERAL_DO,LITERAL_ELSE,LITERAL_FINALLY,LITERAL_IF,LITERAL_FOR,LITERAL_TRY,LITERAL_WHILE,INSTANCE_INIT,STATIC_INIT]">
      <description><![CDATA[blocks to check]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyForInitializerPadCheck" priority="MINOR">
    <name><![CDATA[Empty For Initializer Pad]]></name>
    <configKey><![CDATA[Checker/TreeWalker/EmptyForInitializerPad]]></configKey>
    <category name="Usability"/>
    <description>
      <![CDATA[Checks the padding of an empty for initializer; that is whether a space is required at an empty for initializer, or such spaces are forbidden. Example : <code>for ( ; i < j; i++, j--)</code>]]></description>
    <param key="option" type="s[nospace,space]">
      <description><![CDATA[policy on how to pad an empty for iterator]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyForIteratorPadCheck" priority="MINOR">
    <name><![CDATA[Empty For Iterator Pad]]></name>
    <configKey><![CDATA[Checker/TreeWalker/EmptyForIteratorPad]]></configKey>
    <category name="Usability"/>
    <description>
      <![CDATA[Checks the padding of an empty for iterator; that is whether a space is required at an empty for iterator, or such spaces are forbidden. Example : <code>for (Iterator foo = very.long.line.iterator(); foo.hasNext(); )]]></description>
    <param key="option" type="s[nospace,space]">
      <description><![CDATA[policy on how to pad an empty for iterator]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.EmptyStatementCheck" priority="MINOR">
    <name><![CDATA[Empty Statement]]></name>
    <configKey><![CDATA[Checker/TreeWalker/EmptyStatement]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[Detects empty statements (standalone ';').]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.j2ee.EntityBeanCheck" priority="MAJOR">
    <name><![CDATA[Entity Bean]]></name>
    <configKey><![CDATA[Checker/TreeWalker/j2ee.EntityBean]]></configKey>
    <category name="Usability"/>
    <description>
      <![CDATA[Checks that a direct EJB2 entity bean, i.e. a class that directly implements <code>javax.ejb.EntityBean</code>, satisfies these class requirements:<br/><ul><li>The class is defined as <code>public</code>.</li><li>The class cannot be defined as <code>final</code>.</li><li>It contains a <code>public</code> constructor with no parameters.</li><li>It must not define the <code>finalize</code> method.</li></ul>Checks that methods of a direct entity bean satisfy these requirements:<ul><li>All <code>ejbCreate&lt;METHOD&gt;(...)</code> methods are <code>public</code>, not <code>final</code>, and not <code>static</code>.</li><li>The return type of all <code>ejbCreate&lt;METHOD&gt;(...)</code> methods is not <code>void</code>, because the return type must be the entity bean's primary key type.</li><li>All <code>ejbPostCreate&lt;METHOD&gt;(...)</code> methods are <code>public</code>, not <code>final</code>, and not <code>static</code>.<li></li>The return type of all <code>ejbPostCreate&lt;METHOD&gt;(...)</code> methods is <code>void</code>.</li><li>For each <code>ejbCreate&lt;METHOD&gt;(...)</code> method there is a matching <code>ejbPostCreate&lt;METHOD&gt;(...)</code> method.</li><li>All <code>ejbHome&lt;METHOD&gt;(...)</code> methods are <code>public</code>, and not <code>static</code>.</li><li>The throws clause of all <code>ejbHome&lt;METHOD&gt;(...)</code> methods does not define the <code>java.rmi.RemoteException</code>.</li></ul>When the check is configured to check direct entity beans as having bean-managed persistence, checks that methods satisfy these additional requirements:<ul><li>All <code>ejbFind&lt;METHOD&gt;(...)</code> methods are <code>public</code>, not <code>final</code>, and not <code>static</code>. </li><li>The return type of all <code>ejbFind&lt;METHOD&gt;(...)</code> methods is not <code>void</code>, because the return type must be the entity bean's primary key type, or a collection of primary keys.</li><li>There is a <code>ejbFindByPrimaryKey</code> method with one parameter.</li></ul>When the check is configured to check direct entity beans as having container-managed persistence, checks that methods satisfy these additional requirements: <ul><li>The throws clause of all <code>ejbCreate&lt;METHOD&gt;(...)</code> methods defines the <code>javax.ejb.CreateException</code>.</li><li>All <code>ejbSelect&lt;METHOD&gt;(...)</code> methods are <code>public</code> and <code>abstract</code>.</li><li>The throws clause of all <code>ejbSelect&lt;METHOD&gt;(...)</code> methods defines the <code>javax.ejb.FinderException</code>.</li></ul>]]></description>
    <param key="persistence" type="s[bean,container,mixed]">
      <description><![CDATA[type of persistence management]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.EqualsHashCodeCheck" priority="CRITICAL">
    <name><![CDATA[Equals Hash Code]]></name>
    <configKey><![CDATA[Checker/TreeWalker/EqualsHashCode]]></configKey>
    <category name="Reliability"/>
    <description><![CDATA[Checks that classes that override equals() also override hashCode().]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.sizes.ExecutableStatementCountCheck" priority="MAJOR">
    <name><![CDATA[Executable Statement Count]]></name>
    <configKey><![CDATA[Checker/TreeWalker/ExecutableStatementCount]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[Restricts the number of executable statements to a specified limit (default = 30).]]></description>
    <param key="max" type="i">
      <description><![CDATA[the maximum threshold allowed. Default is 30.]]></description>

    </param>
    <param key="tokens" type="s[CTOR_DEF,METHOD_DEF,INSTANCE_INIT,STATIC_INIT]">
      <description><![CDATA[members to check]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.ExplicitInitializationCheck" priority="MAJOR">
    <name><![CDATA[Explicit Initialization]]></name>
    <configKey><![CDATA[Checker/TreeWalker/ExplicitInitialization]]></configKey>
    <category name="Efficiency"/>
    <description>
      <![CDATA[Checks if any class or object member explicitly initialized to default for its type value (null for object references, zero for numeric types and char and false for boolean.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.FallThroughCheck" priority="MAJOR">
    <name><![CDATA[Fall Through]]></name>
    <configKey><![CDATA[Checker/TreeWalker/FallThrough]]></configKey>
    <category name="Reliability"/>
    <description>
      <![CDATA[Checks for fall through in switch statements Finds locations where a case contains Java code - but lacks a break, return, throw or continue statement.]]></description>
    <param key="checkLastCaseGroup" type="b">
      <description><![CDATA[Whether we need to check last case group or not. Default is false.]]></description>
    </param>
    <param key="reliefPattern" type="r">
      <description><![CDATA[Regulare expression to match the relief comment that supresses the warning about a fall through.]]></description>

    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.sizes.FileLengthCheck" priority="MAJOR">
    <name><![CDATA[File Length]]></name>
    <configKey><![CDATA[Checker/TreeWalker/FileLength]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[Checks for long source files.]]></description>
    <param key="max" type="i">
      <description><![CDATA[maximum allowable number of lines. Default is 2000.]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck" priority="MAJOR">
    <name><![CDATA[Final Class]]></name>
    <configKey><![CDATA[Checker/TreeWalker/FinalClass]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks that class which has only private constructors is declared as final.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck" priority="MINOR">
    <name><![CDATA[Final Local Variable]]></name>
    <configKey><![CDATA[Checker/TreeWalker/FinalLocalVariable]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Ensures that local variables that never get their values changed, must be declared final.]]></description>
    <param key="tokens" type="s[PARAMETER_DEF,VARIABLE_DEF]">
      <description><![CDATA[tokens to check]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.FinalParametersCheck" priority="MINOR">
    <name><![CDATA[Final Parameters]]></name>
    <configKey><![CDATA[Checker/TreeWalker/FinalParameters]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Check that method/constructor/catch/foreach parameters are final.]]></description>
    <param key="tokens" type="s[METHOD_DEF,CTOR_DEF,LITERAL_CATCH]">
      <description><![CDATA[blocks to check]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.j2ee.FinalStaticCheck" priority="MAJOR">
    <name><![CDATA[Final Static]]></name>
    <configKey><![CDATA[Checker/TreeWalker/j2ee.FinalStatic]]></configKey>
    <category name="Reliability"/>
    <description><![CDATA[Checks that all static fields are declared final.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.GenericIllegalRegexpCheck" priority="MAJOR">
    <name><![CDATA[Generic Illegal Regexp]]></name>
    <configKey><![CDATA[Checker/TreeWalker/GenericIllegalRegexp]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[A generic check for code problems, the user can search for any pattern.]]></description>
    <param key="format" type="r">
      <description><![CDATA[illegal pattern]]></description>
    </param>
    <param key="ignoreCase" type="b">
      <description><![CDATA[Controls whether to ignore case when searching. Default is false.]]></description>
    </param>
    <param key="ignoreComments" type="b">
      <description><![CDATA[Controls whether to ignore text in comments when searching. Default is false.]]></description>

    </param>
    <param key="message" type="s">
      <description><![CDATA[message which is used to notify about violations, if empty then default(hard-coded) message is used.]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.HiddenFieldCheck" priority="MAJOR">
    <name><![CDATA[Hidden Field]]></name>
    <configKey><![CDATA[Checker/TreeWalker/HiddenField]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks that a local variable or a parameter does not shadow a field that is defined in the same class.]]></description>
    <param key="tokens" type="s[PARAMETER_DEF,VARIABLE_DEF]">
      <description><![CDATA[tokens to check]]></description>
    </param>
    <param key="ignoreFormat" type="r">
      <description><![CDATA[pattern for names to ignore]]></description>

    </param>
    <param key="ignoreConstructorParameter" type="b">
      <description><![CDATA[Controls whether to ignore constructor parameters. Default is false.]]></description>
    </param>
    <param key="ignoreSetter" type="b">
      <description>
        <![CDATA[Controls whether to ignore the parameter of a property setter method, where the property setter method for field 'xyz' has name 'setXyz', one parameter named 'xyz', and return type void. Default is false.]]></description>

    </param>
    <param key="ignoreAbstractMethods" type="b">
      <description><![CDATA[Controls whether to ignore parameters of abstract methods. Default is false.]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.design.HideUtilityClassConstructorCheck" priority="MAJOR">
    <name><![CDATA[Hide Utility Class Constructor]]></name>
    <configKey><![CDATA[Checker/TreeWalker/HideUtilityClassConstructor]]></configKey>
    <category name="Efficiency"/>
    <description><![CDATA[Make sure that utility classes (classes that contain only static methods) do not have a public constructor.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.IllegalCatchCheck" priority="MAJOR">
    <name><![CDATA[Illegal Catch]]></name>
    <configKey><![CDATA[Checker/TreeWalker/IllegalCatch]]></configKey>
    <category name="Reliability"/>
    <description><![CDATA[Catching java.lang.Exception, java.lang.Error or java.lang.RuntimeException is almost never acceptable.]]></description>
    <param key="illegalClassNames" type="s{}">
      <description><![CDATA[exception class names to reject]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.imports.IllegalImportCheck" priority="MAJOR">
    <name><![CDATA[Illegal Import]]></name>
    <configKey><![CDATA[Checker/TreeWalker/IllegalImport]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks for imports from a set of illegal packages, like sun.*]]></description>
    <param key="illegalPkgs" type="s{}">
      <description><![CDATA[packages to reject]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.IllegalInstantiationCheck" priority="MAJOR">
    <name><![CDATA[Illegal Instantiation]]></name>
    <configKey><![CDATA[Checker/TreeWalker/IllegalInstantiation]]></configKey>
    <category name="Efficiency"/>
    <description>
      <![CDATA[Checks for illegal instantiations where a factory method is preferred. Depending on the project, for some classes it might be preferable to create instances through factory methods rather than calling the constructor. A simple example is the <code>java.lang.Boolean</code> class. In order to save memory and CPU cycles, it is preferable to use the predefined constants TRUE and FALSE. Constructor invocations should be replaced by calls to <code>Boolean.valueOf()</code>. Some extremely performance sensitive projects may require the use of factory methods for other classes as well, to enforce the usage of number caches or object pools.]]></description>
    <param key="classes" type="s{}">
      <description><![CDATA[classes that should not be instantiated]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.IllegalThrowsCheck" priority="MAJOR">
    <name><![CDATA[Illegal Throws]]></name>
    <configKey><![CDATA[Checker/TreeWalker/IllegalThrows]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[Throwing java.lang.Error or java.lang.RuntimeException is almost never acceptable.]]></description>
    <param key="illegalClassNames" type="s{}">
      <description><![CDATA[throw class names to reject]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenCheck" priority="MAJOR">
    <name><![CDATA[Illegal Token]]></name>
    <configKey><![CDATA[Checker/TreeWalker/IllegalToken]]></configKey>
    <category name="Usability"/>
    <description>
      <![CDATA[Checks for illegal tokens. Certain language features often lead to hard to maintain code or are non-obvious to novice developers. Other features may be discouraged in certain frameworks, such as not having native methods in EJB components.]]></description>
    <param key="tokens" type="s{}">
      <description><![CDATA[tokens to check]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck" priority="MAJOR">
    <name><![CDATA[Illegal Token Text]]></name>
    <configKey><![CDATA[Checker/TreeWalker/IllegalTokenText]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks for illegal token text.]]></description>
    <param key="tokens" type="s{}">
      <description><![CDATA[tokens to check]]></description>
    </param>
    <param key="format" type="r">
      <description><![CDATA[illegal pattern]]></description>

    </param>
    <param key="ignoreCase" type="b">
      <description><![CDATA[Controls whether to ignore case when matching. Default is false.]]></description>

    </param>
    <param key="message" type="s">
      <description><![CDATA[Message which is used to notify about violations; if empty then the default message is used.]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck" priority="MAJOR">
    <name><![CDATA[Illegal Type]]></name>
    <configKey><![CDATA[Checker/TreeWalker/IllegalType]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[Checks that particular class are never used as types in variable declarations, return values or parameters.]]></description>
    <param key="tokens" type="s[PARAMETER_DEF,VARIABLE_DEF,METHOD_DEF]">
      <description><![CDATA[tokens to check]]></description>
    </param>
    <param key="illegalClassNames" type="s{}">
      <description><![CDATA[classes that should not be used as types in variable declarations, return values or parameters.]]></description>
    </param>
    <param key="legalAbstractClassNames" type="s{}">
      <description><![CDATA[abstract classes that may be used as types. ]]></description>
    </param>
    <param key="ignoredMethodNames" type="s{}">
      <description><![CDATA[methods that should not be checked]]></description>
    </param>
    <param key="format" type="r">
      <description><![CDATA[pattern for illegal class name]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.imports.ImportOrderCheck" priority="MINOR">
    <name><![CDATA[Import Order]]></name>
    <configKey><![CDATA[Checker/TreeWalker/ImportOrder]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Class to check the ordering/grouping of imports.]]></description>
    <param key="groups" type="s{}">
      <description><![CDATA[list of imports groups (every group identified by string it's started)]]></description>
    </param>
    <param key="ordered" type="b">
      <description><![CDATA[whether imports within group should be sorted. Default is true.]]></description>

    </param>
    <param key="separated" type="b">
      <description><![CDATA[whether imports groups should be separated by, at least, one blank line. Default is false.]]></description>

    </param>
    <param key="caseSensitive" type="b">
      <description><![CDATA[whether string comparision should be case sensitive or not. Default is true.]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck" priority="MINOR">
    <name><![CDATA[Indentation]]></name>
    <configKey><![CDATA[Checker/TreeWalker/Indentation]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks correct indentation of Java Code.]]></description>
    <param key="basicOffset" type="i">
      <description><![CDATA[how many spaces to use for new indentation level. Default is 4.]]></description>
    </param>
    <param key="braceAdjustment" type="i">
      <description><![CDATA[how far brace should be indented when on next line. Default is 0.]]></description>

    </param>
    <param key="caseIndent" type="i">
      <description><![CDATA[how much to indent a case label. Default is 4.]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.InnerAssignmentCheck" priority="MAJOR">
    <name><![CDATA[Inner Assignment]]></name>
    <configKey><![CDATA[Checker/TreeWalker/InnerAssignment]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks for assignments in subexpressions, such as in String s = Integer.toString(i = 2);.]]></description>
    <param key="tokens" type="s[ASSIGN,BAND_ASSIGN,BOR_ASSIGN,BSR_ASSIGN,BXOR_ASSIGN,DIV_ASSIGN,MINUS_ASSIGN,MOD_ASSIGN,PLUS_ASSIGN,SL_ASSIGN,SR_ASSIGN,STAR_ASSIGN]">
      <description><![CDATA[assignments to check]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.design.InterfaceIsTypeCheck" priority="MAJOR">
    <name><![CDATA[Interface Is Type]]></name>
    <configKey><![CDATA[Checker/TreeWalker/InterfaceIsType]]></configKey>
    <category name="Usability"/>
    <description>
      <![CDATA[Implements Bloch, Effective Java, Item 17 - Use Interfaces only to define types.  According to Bloch, an interface should describe a type. It is therefore inappropriate to define an interface that does not contain any methods but only constants. The Standard class javax.swing.SwingConstants is an example of a class that would be flagged by this check. The check can be configured to also disallow marker interfaces like java.io.Serializable, that do not contain methods or constants at all.]]></description>
    <param key="allowMarkerInterfaces" type="b">
      <description><![CDATA[Controls whether marker interfaces like Serializable are allowed. Default is true.]]></description>

    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck" priority="MAJOR">
    <name><![CDATA[Javadoc Method]]></name>
    <configKey><![CDATA[Checker/TreeWalker/JavadocMethod]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks the Javadoc of a method or constructor.]]></description>
    <param key="scope" type="s[nothing,public,protected,package,private,anoninner]">
      <description><![CDATA[visibility scope where Javadoc comments are checked]]></description>

    </param>
    <param key="excludeScope" type="s[nothing,public,protected,package,private,anoninner]">
      <description><![CDATA[visibility scope where Javadoc comments are not checked]]></description>

    </param>
    <param key="allowUndeclaredRTE" type="b">
      <description><![CDATA[whether to allow documented exceptions that are not declared if they are a subclass of java.lang.RuntimeException. Default is false.]]></description>

    </param>
    <param key="allowThrowsTagsForSubclasses" type="b">
      <description><![CDATA[whether to allow documented exceptions that are subclass of one of declared exception. Default is false.]]></description>

    </param>
    <param key="allowMissingParamTags" type="b">
      <description><![CDATA[whether to ignore errors when a method has parameters but does not have matching param tags in the javadoc. Default is false.]]></description>
    </param>
    <param key="allowMissingThrowsTags" type="b">
      <description><![CDATA[whether to ignore errors when a method declares that it throws exceptions but does have matching throws tags in the javadoc. Default is false.]]></description>

    </param>
    <param key="allowMissingReturnTag" type="b">
      <description><![CDATA[whether to ignore errors when a method returns non-void type does have a return tag in the javadoc. Default is false.]]></description>

    </param>
    <param key="allowMissingJavadoc" type="b">
      <description><![CDATA[whether to ignore errors when a method javadoc is missed. Default is false.]]></description>
    </param>
    <param key="allowMissingPropertyJavadoc" type="b">
      <description>
        <![CDATA[Whether to allow missing Javadoc on accessor methods for properties (setters and getters). The setter and getter methods must match exactly the structures below.  <code> public void setNumber(final int number) { mNumber = number; }  public int getNumber() { return mNumber; }  public boolean isSomething() { return false; } </code>. Default is false.]]></description>

    </param>
    <param key="tokens" type="s[METHOD_DEF,CTOR_DEF]">
      <description><![CDATA[definitions to check]]></description>

    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck" priority="MAJOR">
    <name><![CDATA[Javadoc Style]]></name>
    <configKey><![CDATA[Checker/TreeWalker/JavadocStyle]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Custom Checkstyle Check to validate Javadoc.]]></description>
    <param key="scope" type="s[nothing,public,protected,package,private,anoninner]">
      <description><![CDATA[visibility scope where Javadoc comments are checked]]></description>

    </param>
    <param key="excludeScope" type="s[nothing,public,protected,package,private,anoninner]">
      <description><![CDATA[visibility scope where Javadoc comments are not checked]]></description>

    </param>
    <param key="checkFirstSentence" type="b">
      <description><![CDATA[Whether to check the first sentence for proper end of sentence. Default is true.]]></description>

    </param>
    <param key="checkEmptyJavadoc" type="b">
      <description><![CDATA[Whether to check if the Javadoc is missing a describing text. Default is false.]]></description>
    </param>
    <param key="checkHtml" type="b">
      <description><![CDATA[Whether to check for incomplete html tags. Default is true.]]></description>
    </param>
    <param key="tokens" type="s[INTERFACE_DEF,CLASS_DEF,METHOD_DEF,CTOR_DEF,VARIABLE_DEF]">
      <description><![CDATA[definitions to check]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTypeCheck" priority="MAJOR">
    <name><![CDATA[Javadoc Type]]></name>
    <configKey><![CDATA[Checker/TreeWalker/JavadocType]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks the Javadoc of a type.]]></description>
    <param key="scope" type="s[nothing,public,protected,package,private,anoninner]">
      <description><![CDATA[visibility scope where Javadoc comments are checked]]></description>
    </param>
    <param key="excludeScope" type="s[nothing,public,protected,package,private,anoninner]">
      <description><![CDATA[visibility scope where Javadoc comments are not checked]]></description>
    </param>
    <param key="authorFormat" type="r">
      <description><![CDATA[pattern for @author tag]]></description>
    </param>
    <param key="versionFormat" type="r">
      <description><![CDATA[pattern for @version tag]]></description>
    </param>
    <param key="allowMissingParamTags" type="b">
      <description><![CDATA[whether to ignore errors when a class has type parameters but does not have matching param tags in the javadoc. Default is false.]]></description>
    </param>
    <param key="tokens" type="s[INTERFACE_DEF,CLASS_DEF]">
      <description><![CDATA[definitions to check]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocVariableCheck" priority="MAJOR">
    <name><![CDATA[Javadoc Variable]]></name>
    <configKey><![CDATA[Checker/TreeWalker/JavadocVariable]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks that a variable has Javadoc comment.]]></description>
    <param key="scope" type="s[nothing,public,protected,package,private,anoninner]">
      <description><![CDATA[visibility scope where Javadoc comments are checked]]></description>
    </param>
    <param key="excludeScope" type="s[nothing,public,protected,package,private,anoninner]">
      <description><![CDATA[visibility scope where Javadoc comments are not checked]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck" priority="MINOR">
    <name><![CDATA[Left Curly]]></name>
    <configKey><![CDATA[Checker/TreeWalker/LeftCurly]]></configKey>
    <category name="Usability"/>
    <description>
      <![CDATA[Checks for the placement of left curly braces for code blocks. The policy to verify is specified using property option. Policies <code>eol</code> and <code>nlow</code> take into account property maxLineLength.]]></description>
    <param key="option" type="s[eol,nl,nlow]">
      <description>
        <![CDATA[policy on placement of a left curly brace ('{'). eol : the brace must always be on the end of the line, nl : he brace must always be on a new line, nlow : ff the brace will fit on the first line of the statement, taking into account maximum line length, then apply eol rule. Otherwise apply the nl rule. nlow is a mnemonic for 'new line on wrap'.]]></description>
    </param>
    <param key="maxLineLength" type="i">
      <description><![CDATA[maximum number of characters in a line. Default is 80.]]></description>
    </param>
    <param key="tokens"
           type="s[CLASS_DEF,CTOR_DEF,INTERFACE_DEF,LITERAL_CATCH,LITERAL_DO,LITERAL_ELSE,LITERAL_FINALLY,LITERAL_FOR,LITERAL_IF,LITERAL_SWITCH,LITERAL_SYNCHRONIZED,LITERAL_TRY,LITERAL_WHILE,METHOD_DEF]">
      <description><![CDATA[blocks to check]]></description>

    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck" priority="MAJOR">
    <name><![CDATA[Line Length]]></name>
    <configKey><![CDATA[Checker/TreeWalker/LineLength]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[Checks for long lines.]]></description>
    <param key="ignorePattern" type="r">
      <description><![CDATA[pattern for lines to ignore]]></description>

    </param>
    <param key="max" type="i">
      <description><![CDATA[maximum allowable line length. Default is 80.]]></description>

    </param>
    <param key="tabWidth" type="i">
      <description><![CDATA[number of expanded spaces for a tab character. Default is 8.]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.naming.LocalFinalVariableNameCheck" priority="MAJOR">
    <name><![CDATA[Local Final Variable Name]]></name>
    <configKey><![CDATA[Checker/TreeWalker/LocalFinalVariableName]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks that local final variable names conform to a format specified by the format property.]]></description>
    <param key="format" type="r">
      <description><![CDATA[Validates identifiers for local, final variables, including catch parameters]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.j2ee.LocalHomeInterfaceCheck" priority="MAJOR">
    <name><![CDATA[Local Home Interface]]></name>
    <configKey><![CDATA[Checker/TreeWalker/j2ee.LocalHomeInterface]]></configKey>
    <category name="Usability"/>
    <description>
      <![CDATA[EJB2 : checks that a direct local home interface, i.e. an interface that directly extends <code>javax.ejb.EJBLocalHome</code>, satisfies these requirements :<ul><li>The return type of all <code>create&lt;METHOD&gt;(...)</code> methods is not <code>void</code>, because the return type must be the bean's local interface.</li><li>The throws clause of all <code>create&lt;METHOD&gt;(...)</code> methods defines the <code>javax.ejb.CreateException</code>.</li><li>The throws clause of all methods does not define the <code>java.rmi.RemoteException</code>.</li></ul>Reference: Enterprise JavaBeansTM Specification,Version 2.0,sections 6.4 and 9.6.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.j2ee.LocalInterfaceCheck" priority="MAJOR">
    <name><![CDATA[Local Interface]]></name>
    <configKey><![CDATA[Checker/TreeWalker/j2ee.LocalInterface]]></configKey>
    <category name="Usability"/>
    <description>
      <![CDATA[EJB2 : checks that a direct local interface, i.e. an interface that directly extends javax.ejb.EJBLocalObject, satisfies these requirements:<ul><li>The throws clause of all methods does not define the java.rmi.RemoteException.</li></ul>Reference: Enterprise JavaBeansTM Specification,Version 2.0, section 9.10.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.naming.LocalVariableNameCheck" priority="MAJOR">
    <name><![CDATA[Local Variable Name]]></name>
    <configKey><![CDATA[Checker/TreeWalker/LocalVariableName]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks that local, non-final variable names conform to a format specified by the format property.]]></description>
    <param key="format" type="r">
      <description><![CDATA[Validates identifiers for local, non-final variables, including catch parameters]]></description>
    </param>
    <param key="tokens" type="s[VARIABLE_DEF,PARAMETER_DEF]">
      <description><![CDATA[Controls whether the check applies to variable declarations or catch clause parameters]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.MagicNumberCheck" priority="MINOR">
    <name><![CDATA[Magic Number]]></name>
    <configKey><![CDATA[Checker/TreeWalker/MagicNumber]]></configKey>
    <category name="Reliability"/>
    <description><![CDATA[Checks for magic numbers.]]></description>
    <param key="tokens" type="s[NUM_DOUBLE,NUM_FLOAT,NUM_INT,NUM_LONG]">
      <description><![CDATA[tokens to check]]></description>
    </param>
    <param key="ignoreNumbers" type="i{}">
      <description><![CDATA[non-magic numbers. Default is -1,0,1,2.]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.naming.MemberNameCheck" priority="MAJOR">
    <name><![CDATA[Member Name]]></name>
    <configKey><![CDATA[Checker/TreeWalker/MemberName]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks that instance variable names conform to a format specified by the format property.]]></description>
    <param key="format" type="r">
      <description><![CDATA[Validates identifiers for non-static fields]]></description>
    </param>
    <param key="applyToPublic" type="b">
      <description><![CDATA[Controls whether to apply the check to public member. Default is true.]]></description>
    </param>
    <param key="applyToProtected" type="b">
      <description><![CDATA[Controls whether to apply the check to protected member. Default is true.]]></description>
    </param>
    <param key="applyToPackage" type="b">
      <description><![CDATA[Controls whether to apply the check to package-private member. Default is true.]]></description>
    </param>
    <param key="applyToPrivate" type="b">
      <description><![CDATA[Controls whether to apply the check to private member. Default is true.]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.j2ee.MessageBeanCheck" priority="MAJOR">
    <name><![CDATA[Message Bean]]></name>
    <configKey><![CDATA[Checker/TreeWalker/j2ee.MessageBean]]></configKey>
    <category name="Usability"/>
    <description>
      <![CDATA[EJB2 : checks that a direct message bean, i.e. a class that directly implements <code>javax.ejb.MessageDrivenBean</code> and <code>javax.jms.MessageListener</code>, satisfies these class requirements:<ul><li>The class is defined as <code>public</code>.</li><li>The class cannot be defined as <code>final</code>.</li><li>The class cannot be defined as <code>abstract</code>.</li><li>It contains a <code>public</code> constructor with no parameters.</li><li>It must not define the <code>finalize</code> method.</li><li>It defines an <code>ejbCreate()</code> method this is <code>public</code>, not <code>final</code>, not <code>static</code>, has no parameters, and has return type <code>void</code>. </li> </ul>Reference: Enterprise JavaBeans? Specification,Version 2.0,section 15.7.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.sizes.MethodLengthCheck" priority="MAJOR">
    <name><![CDATA[Method Length]]></name>
    <configKey><![CDATA[Checker/TreeWalker/MethodLength]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[Checks for long methods.]]></description>
    <param key="max" type="i">
      <description><![CDATA[maximum allowable number of lines. Default is 150.]]></description>
    </param>
    <param key="countEmpty" type="b">
      <description><![CDATA[whether to count empty lines and single line comments of the form //. Default is true.]]></description>
    </param>
    <param key="tokens" type="s[METHOD_DEF,CTOR_DEF]">
      <description><![CDATA[blocks to check]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.naming.MethodNameCheck" priority="MAJOR">
    <name><![CDATA[Method Name]]></name>
    <configKey><![CDATA[Checker/TreeWalker/MethodName]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks that method names conform to a format specified by the format property.]]></description>
    <param key="format" type="r">
      <description><![CDATA[Validates identifiers for methods]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck" priority="MAJOR">
    <name><![CDATA[Method Param Pad]]></name>
    <configKey><![CDATA[Checker/TreeWalker/MethodParamPad]]></configKey>
    <category name="Usability"/>
    <description>
      <![CDATA[Checks the padding between the identifier of a method definition, constructor definition, method call, or constructor invocation; and the left parenthesis of the parameter list.]]></description>
    <param key="allowLineBreaks" type="b">
      <description><![CDATA[whether a line break between the identifier and left parenthesis is allowed. Default is false.]]></description>
    </param>
    <param key="tokens" type="s[CTOR_DEF,LITERAL_NEW,METHOD_CALL,METHOD_DEF,SUPER_CTOR_CALL]">
      <description><![CDATA[tokens to check]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.MissingCtorCheck" priority="MAJOR">
    <name><![CDATA[Missing Constructor]]></name>
    <configKey><![CDATA[Checker/TreeWalker/MissingCtor]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks that classes (except abstract one) define a constructor and don't rely on the default one.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.MissingSwitchDefaultCheck" priority="MAJOR">
    <name><![CDATA[Missing Switch Default]]></name>
    <configKey><![CDATA[Checker/TreeWalker/MissingSwitchDefault]]></configKey>
    <category name="Reliability"/>
    <description><![CDATA[Checks that switch statement has default clause.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.ModifiedControlVariableCheck" priority="MAJOR">
    <name><![CDATA[Modified Control Variable]]></name>
    <configKey><![CDATA[Checker/TreeWalker/ModifiedControlVariable]]></configKey>
    <category name="Reliability"/>
    <description><![CDATA[Check for ensuring that for loop control variables are not modified inside the for block.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.modifier.ModifierOrderCheck" priority="MINOR">
    <name><![CDATA[Modifier Order]]></name>
    <configKey><![CDATA[Checker/TreeWalker/ModifierOrder]]></configKey>
    <category name="Usability"/>
    <description>
      <![CDATA[Checks that the order of modifiers conforms to the suggestions in the Java Language specification, sections 8.1.1, 8.3.1 and 8.4.3. The correct order is : public, protected, private, abstract, static, final, transient, volatile, synchronized, native, strictfp.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.MultipleStringLiteralsCheck" priority="MAJOR">
    <name><![CDATA[Multiple String Literals]]></name>
    <configKey><![CDATA[Checker/TreeWalker/MultipleStringLiterals]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[Checks for multiple occurrences of the same string literal within a single file. Code duplication makes maintenance more difficult, so it can be better to replace the multiple occurrences with a constant.]]></description>
    <param key="allowedDuplicates" type="i">
      <description><![CDATA[The maximum number of occurences to allow without generating a warning. Default is 1.]]></description>
    </param>
    <param key="ignoreStringsRegexp" type="r">
      <description><![CDATA[regexp pattern for ignored strings (with quotation marks)]]></description>
    </param>
    <param key="ignoreOccurrenceContext" type="s">
      <description>
        <![CDATA[Token type names where duplicate strings are ignored even if they don't match ignoredStringsRegexp. This allows you to exclude syntactical contexts like Annotations or static initializers from the check.]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.MultipleVariableDeclarationsCheck" priority="MAJOR">
    <name><![CDATA[Multiple Variable Declarations]]></name>
    <configKey><![CDATA[Checker/TreeWalker/MultipleVariableDeclarations]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks that each variable declaration is in its own statement and on its own line.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.design.MutableExceptionCheck" priority="MAJOR">
    <name><![CDATA[Mutable Exception]]></name>
    <configKey><![CDATA[Checker/TreeWalker/MutableException]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Ensures that exceptions (defined as any class name conforming to some regular expression) are immutable.]]></description>
    <param key="format" type="r">
      <description><![CDATA[pattern for name of exception class.]]></description>

    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.metrics.NPathComplexityCheck" priority="MAJOR">
    <name><![CDATA[NPath Complexity]]></name>
    <configKey><![CDATA[Checker/TreeWalker/NPathComplexity]]></configKey>
    <category name="Maintainability"/>
    <description>
      <![CDATA[Checks the npath complexity of a method against a specified limit (default = 200). The NPATH metric computes the number of possible execution paths through a function. It takes into account the nesting of conditional statements and multi-part boolean expressions (e.g., A && B, C || D, etc.).]]></description>
    <param key="max" type="i">
      <description><![CDATA[the maximum threshold allowed. Default is 200.]]></description>

    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.blocks.NeedBracesCheck" priority="MINOR">
    <name><![CDATA[Need Braces]]></name>
    <configKey><![CDATA[Checker/TreeWalker/NeedBraces]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks for braces around code blocks.]]></description>
    <param key="tokens" type="s[LITERAL_DO,LITERAL_ELSE,LITERAL_IF,LITERAL_FOR,LITERAL_WHILE]">
      <description><![CDATA[blocks to check]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.NestedIfDepthCheck" priority="MAJOR">
    <name><![CDATA[Nested If Depth]]></name>
    <configKey><![CDATA[Checker/TreeWalker/NestedIfDepth]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[Restricts nested if-else blocks to a specified depth (default = 1).]]></description>
    <param key="max" type="i">
      <description><![CDATA[allowed nesting depth. Default is 1.]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.NestedTryDepthCheck" priority="MAJOR">
    <name><![CDATA[Nested Try Depth]]></name>
    <configKey><![CDATA[Checker/TreeWalker/NestedTryDepth]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[Restricts nested try-catch-finally blocks to a specified depth (default = 1).]]></description>
    <param key="max" type="i">
      <description><![CDATA[allowed nesting depth. Default is 1.]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheck" priority="MINOR">
    <name><![CDATA[Newline At End Of File]]></name>
    <configKey><![CDATA[Checker/NewlineAtEndOfFile]]></configKey>
    <category name="Usability"/>
    <description>
      <![CDATA[Checks that there is a newline at the end of each file. Any source files and text files in general should end with a newline character, especially when using SCM systems such as CVS. CVS will even print a warning when it encounters a file that doesn't end with a newline.]]></description>
    <param key="lineSeparator" type="s[system,crlf,cr,lf]">
      <description><![CDATA[type of line separator. One of 'system' (system default), 'crlf' (Windows-style), 'cr' (Mac-style) and 'lf' (Unix-style).]]></description>
    </param>
    <param key="fileExtensions" type="s{}">
      <description><![CDATA[file type extension of the files to check.]]></description>

    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck" priority="MINOR">
    <name><![CDATA[No Whitespace After]]></name>
    <configKey><![CDATA[Checker/TreeWalker/NoWhitespaceAfter]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks that there is no whitespace after a token.]]></description>
    <param key="allowLineBreaks" type="b">
      <description><![CDATA[whether whitespace is allowed if the token is at a linebreak. Default is true.]]></description>

    </param>
    <param key="tokens" type="s[ARRAY_INIT,BNOT,DEC,DOT,INC,LNOT,UNARY_MINUS,UNARY_PLUS,TYPECAST]">
      <description><![CDATA[tokens to check]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck" priority="MINOR">
    <name><![CDATA[No Whitespace Before]]></name>
    <configKey><![CDATA[Checker/TreeWalker/NoWhitespaceBefore]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks that there is no whitespace before a token.]]></description>
    <param key="allowLineBreaks" type="b">
      <description><![CDATA[whether whitespace is allowed if the token is at a linebreak. Default is false.]]></description>
    </param>
    <param key="tokens" type="s[SEMI,DOT,POST_DEC,POST_INC]">
      <description><![CDATA[tokens to check]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck" priority="MINOR">
    <name><![CDATA[Operator Wrap]]></name>
    <configKey><![CDATA[Checker/TreeWalker/OperatorWrap]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks line wrapping for operators.]]></description>
    <param key="option" type="s[nl,eol]">
      <description><![CDATA[policy on how to wrap lines. 'nl' : the operator must be on a new line, 'eol' : the operator must be at the end of the line. Default is nl.]]></description>
    </param>
    <param key="tokens"
           type="s[ASSIGN,BAND,BAND_ASSIGN,BOR,BOR_ASSIGN,BSR,BSR_ASSIGN,BXOR,BXOR_ASSIGN,COLON,DIV,DIV_ASSIGN,EQUAL,GE,GT,LAND,LE,LITERAL_INSTANCEOF,LOR,LT,MINUS,MINUS_ASSIGN,MOD,MOD_ASSIGN,NOT_EQUAL,PLUS,PLUS_ASSIGN,QUESTION,SL,SL_ASSIGN,SR,SR_ASSIGN,STAR,STAR_ASSIGN]">
      <description><![CDATA[tokens to check]]></description>

    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.PackageDeclarationCheck" priority="MAJOR">
    <name><![CDATA[Package Declaration]]></name>
    <configKey><![CDATA[Checker/TreeWalker/PackageDeclaration]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[Ensures there is a package declaration.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.javadoc.PackageHtmlCheck" priority="MINOR">
    <name><![CDATA[Package Html]]></name>
    <configKey><![CDATA[Checker/PackageHtml]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks that all packages have a package documentation.]]></description>
    <param key="fileExtensions" type="s{}">
      <description>
        <![CDATA[file type extension to identify java files. Setting this property is typically only required if your java source files are preprocessed and the original files do not have the extension .java]]></description>

    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.naming.PackageNameCheck" priority="MAJOR">
    <name><![CDATA[Package Name]]></name>
    <configKey><![CDATA[Checker/TreeWalker/PackageName]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks that package names conform to a format specified by the format property.]]></description>
    <param key="format" type="r">
      <description><![CDATA[Validates identifiers for packages]]></description>

    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.ParameterAssignmentCheck" priority="MAJOR">
    <name><![CDATA[Parameter Assignment]]></name>
    <configKey><![CDATA[Checker/TreeWalker/ParameterAssignment]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Disallow assignment of parameters.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.naming.ParameterNameCheck" priority="MAJOR">
    <name><![CDATA[Parameter Name]]></name>
    <configKey><![CDATA[Checker/TreeWalker/ParameterName]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks that parameter names conform to a format specified by the format property.]]></description>
    <param key="format" type="r">
      <description><![CDATA[Validates identifiers for parameters]]></description>

    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.sizes.ParameterNumberCheck" priority="MAJOR">
    <name><![CDATA[Parameter Number]]></name>
    <configKey><![CDATA[Checker/TreeWalker/ParameterNumber]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[Checks the number of parameters that a method or constructor has.]]></description>
    <param key="max" type="i">
      <description><![CDATA[maximum allowable number of parameters. Default is 7.]]></description>

    </param>
    <param key="tokens" type="s[METHOD_DEF,CTOR_DEF]">
      <description><![CDATA[declarations to check]]></description>

    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck" priority="MINOR">
    <name><![CDATA[Paren Pad]]></name>
    <configKey><![CDATA[Checker/TreeWalker/ParenPad]]></configKey>
    <category name="Usability"/>
    <description>
      <![CDATA[Checks the padding of parentheses; that is whether a space is required after a left parenthesis and before a right parenthesis, or such spaces are forbidden, with the exception that it does not check for padding of the right parenthesis at an empty for iterator.]]></description>
    <param key="option" type="s[nospace,space]">
      <description><![CDATA[policy on how to pad parentheses]]></description>
    </param>
    <param key="tokens" type="s[CTOR_CALL,LPAREN,METHOD_CALL,RPAREN,SUPER_CTOR_CALL]">
      <description><![CDATA[tokens to check]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.modifier.RedundantModifierCheck" priority="MINOR">
    <name><![CDATA[Redundant Modifier]]></name>
    <configKey><![CDATA[Checker/TreeWalker/RedundantModifier]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[Checks for redundant modifiers in interface and annotation definitions.]]></description>
    <param key="tokens" type="s[METHOD_DEF,VARIABLE_DEF,ANNOTATION_FIELD_DEF]">
      <description><![CDATA[tokens to check]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.RedundantThrowsCheck" priority="MINOR">
    <name><![CDATA[Redundant Throws]]></name>
    <configKey><![CDATA[Checker/TreeWalker/RedundantThrows]]></configKey>
    <category name="Maintainability"/>
    <description>
      <![CDATA[Checks for redundant exceptions declared in throws clause such as duplicates, unchecked exceptions or subclasses of another declared exception.]]></description>
    <param key="allowUnchecked" type="b">
      <description><![CDATA[whether unchecked exceptions in throws are allowed or not. Default is false.]]></description>
    </param>
    <param key="allowSubclasses" type="b">
      <description><![CDATA[whether subclass of another declared exception is allowed in throws clause. Default is false.]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.RegexpCheck" priority="MAJOR">
    <name><![CDATA[Regexp]]></name>
    <configKey><![CDATA[Checker/TreeWalker/Regexp]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[A check that makes sure that a specified pattern exists (or not) in the file.]]></description>
    <param key="format" type="r">
      <description><![CDATA[pattern]]></description>
    </param>
    <param key="message" type="s">
      <description><![CDATA[message which is used to notify about violations, if empty then default(hard-coded) message is used.]]></description>

    </param>
    <param key="illegalPattern" type="b">
      <description><![CDATA[Controls whether the pattern is required or illegal. Default is false.]]></description>

    </param>
    <param key="duplicateLimit" type="i">
      <description>
        <![CDATA[Controls whether to check for duplicates of a required pattern, any negative value means no checking for duplicates, any positive value is used as the maximum number of allowed duplicates, if the limit is exceeded errors will be logged. Default is -1.]]></description>

    </param>
    <param key="errorLimit" type="i">
      <description><![CDATA[Controls the maximum number of errors before the check will abort. Default is 100.]]></description>
    </param>
    <param key="ignoreComments" type="b">
      <description><![CDATA[Controls whether to ignore matches found within comments. Default is false.]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.j2ee.RemoteHomeInterfaceCheck" priority="MAJOR">
    <name><![CDATA[Remote Home Interface]]></name>
    <configKey><![CDATA[Checker/TreeWalker/j2ee.RemoteHomeInterface]]></configKey>
    <category name="Usability"/>
    <description>
      <![CDATA[EJB2 : checks that a direct remote home interface, i.e. an interface that directly extends javax.ejb.EJBHome, satisfies these requirements:<ul><li>The return type of all <code>create&lt;METHOD&gt;(...)</code> methods is not void, because the return type must be the bean's remote interface.</li><li>The throws clause of all <code>create&lt;METHOD&gt;(...)</code> methods defines the <code>javax.ejb.CreateException</code>.</li><li>The throws clause of all methods defines the <code>java.rmi.RemoteException</code>.</li></ul>Reference: Enterprise JavaBeansTM Specification,Version 2.0, sections 6.3 and 9.5.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.j2ee.RemoteInterfaceCheck" priority="MAJOR">
    <name><![CDATA[Remote Interface]]></name>
    <configKey><![CDATA[Checker/TreeWalker/j2ee.RemoteInterface]]></configKey>
    <category name="Usability"/>
    <description>
      <![CDATA[EJB2 : checks that a direct remote interface, i.e. an interface that directly extends <code>javax.ejb.EJBObject</code>, satisfies these requirements:<ul><li>The throws clause of all methods defines the <code>java.rmi.RemoteException</code>.</li></ul>Reference: Enterprise JavaBeansTM Specification,Version 2.0, section 9.9.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck" priority="MAJOR">
    <name><![CDATA[Require This]]></name>
    <configKey><![CDATA[Checker/TreeWalker/RequireThis]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks that code doesn't rely on the this default.]]></description>
    <param key="checkFields" type="b">
      <description><![CDATA[whether we should check fields usage or not. Default is true.]]></description>
    </param>
    <param key="checkMethods" type="b">
      <description><![CDATA[whether we should check methods usage or not. Default is true.]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.RequiredRegexpCheck" priority="MAJOR">
    <name><![CDATA[Required Regexp]]></name>
    <configKey><![CDATA[Checker/TreeWalker/RequiredRegexp]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[A check that makes sure that a specified pattern exists in the code.]]></description>
    <param key="format" type="r">
      <description><![CDATA[required pattern]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.ReturnCountCheck" priority="MAJOR">
    <name><![CDATA[Return Count]]></name>
    <configKey><![CDATA[Checker/TreeWalker/ReturnCount]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[Restricts return statements to a specified count (default = 2).]]></description>
    <param key="max" type="i">
      <description><![CDATA[maximum allowed number of return statments]]></description>
    </param>
    <param key="format" type="r">
      <description><![CDATA[method names to ingone]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck" priority="MINOR">
    <name><![CDATA[Right Curly]]></name>
    <configKey><![CDATA[Checker/TreeWalker/RightCurly]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks the placement of right curly braces.]]></description>
    <param key="option" type="s[same,alone]">
      <description><![CDATA[policy on placement of a right curly brace ('}')]]></description>

    </param>
    <param key="tokens" type="s[LITERAL_TRY,LITERAL_CATCH,LITERAL_FINALLY,LITERAL_IF,LITERAL_ELSE]">
      <description><![CDATA[blocks to check]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.j2ee.SessionBeanCheck" priority="MAJOR">
    <name><![CDATA[Session Bean]]></name>
    <configKey><![CDATA[Checker/TreeWalker/j2ee.SessionBean]]></configKey>
    <category name="Usability"/>
    <description>
      <![CDATA[EJB2 : checks that a direct session bean, i.e. a class that directly implements <code>javax.ejb.SessionBean</code>, satisfies these class requirements:<ul><li>The class is defined as public.</li><li>The class cannot be defined as final.</li><li>The class cannot be defined as abstract.</li><li>It contains a public constructor with no parameters.</li><li>It must not define the finalize method.</li><li>It defines an <code>ejbCreate&lt;METHOD&gt;()</code> method this is public, not final, not static, and has return type void.</li></ul>Reference: Enterprise JavaBeans? Specification,Version 2.0, section 7.10.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.SimplifyBooleanExpressionCheck" priority="MAJOR">
    <name><![CDATA[Simplify Boolean Expression]]></name>
    <configKey><![CDATA[Checker/TreeWalker/SimplifyBooleanExpression]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[Checks for overly complicated boolean expressions.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.SimplifyBooleanReturnCheck" priority="MAJOR">
    <name><![CDATA[Simplify Boolean Return]]></name>
    <configKey><![CDATA[Checker/TreeWalker/SimplifyBooleanReturn]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[Checks for overly complicated boolean return statements.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.naming.StaticVariableNameCheck" priority="MAJOR">
    <name><![CDATA[Static Variable Name]]></name>
    <configKey><![CDATA[Checker/TreeWalker/StaticVariableName]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks that static, non-final variable names conform to a format specified by the format property.]]></description>
    <param key="format" type="r">
      <description><![CDATA[Validates identifiers for static, non-final fields]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.duplicates.StrictDuplicateCodeCheck" priority="MAJOR">
    <name><![CDATA[Strict Duplicate Code]]></name>
    <configKey><![CDATA[Checker/StrictDuplicateCode]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[Performs a line-by-line comparison of all code lines and reports duplicate code if a sequence of lines differs only in indentation.]]></description>
    <param key="min" type="i">
      <description><![CDATA[how many lines must be equal to be considered a duplicate. Default is 12.]]></description>
    </param>
    <param key="charset" type="s">
      <description><![CDATA[name of the file charset]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.StringLiteralEqualityCheck" priority="MAJOR">
    <name><![CDATA[String Literal Equality]]></name>
    <configKey><![CDATA[Checker/TreeWalker/StringLiteralEquality]]></configKey>
    <category name="Reliability"/>
    <description><![CDATA[Checks that string literals are not used with == or !=.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.SuperCloneCheck" priority="MAJOR">
    <name><![CDATA[Super Clone]]></name>
    <configKey><![CDATA[Checker/TreeWalker/SuperClone]]></configKey>
    <category name="Reliability"/>
    <description><![CDATA[Checks that an overriding clone() method invokes super.clone().]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.SuperFinalizeCheck" priority="MAJOR">
    <name><![CDATA[Super Finalize]]></name>
    <configKey><![CDATA[Checker/TreeWalker/SuperFinalize]]></configKey>
    <category name="Reliability"/>
    <description><![CDATA[Checks that an overriding finalize() method invokes super.finalize().]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.whitespace.TabCharacterCheck" priority="MINOR">
    <name><![CDATA[Tab Character]]></name>
    <configKey><![CDATA[Checker/TreeWalker/TabCharacter]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Reports tab characters ('	') in the source code.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.j2ee.ThisParameterCheck" priority="MAJOR">
    <name><![CDATA[This Parameter]]></name>
    <configKey><![CDATA[Checker/TreeWalker/j2ee.ThisParameter]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks that 'this' is not a parameter of any method calls or constructors for a bean.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.j2ee.ThisReturnCheck" priority="MAJOR">
    <name><![CDATA[This Return]]></name>
    <configKey><![CDATA[Checker/TreeWalker/j2ee.ThisReturn]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks that 'this' is not returned by a bean method.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.design.ThrowsCountCheck" priority="MAJOR">
    <name><![CDATA[Throws Count]]></name>
    <configKey><![CDATA[Checker/TreeWalker/ThrowsCount]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[Restricts throws statements to a specified count (default = 1).]]></description>
    <param key="max" type="i">
      <description><![CDATA[maximum allowed number of throws statments]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.TodoCommentCheck" priority="MINOR">
    <name><![CDATA[Todo Comment]]></name>
    <configKey><![CDATA[Checker/TreeWalker/TodoComment]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[A check for TODO comments.]]></description>
    <param key="format" type="r">
      <description><![CDATA[pattern to check. Default is TODO:]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.indentation.TrailingCommentCheck" priority="MINOR">
    <name><![CDATA[Trailing Comment]]></name>
    <configKey><![CDATA[Checker/TreeWalker/TrailingComment]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[The check to ensure that requires that comments be the only thing on a line.]]></description>
    <param key="format" type="r">
      <description><![CDATA[pattern for string allowed before comment.]]></description>
    </param>
    <param key="legalComment" type="r">
      <description>
        <![CDATA[pattern for text of trailing comment which is allowed. (this patter will not be applied to multiline comments and text of comment will be trimmed before matching)]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.TranslationCheck" priority="MINOR">
    <name><![CDATA[Translation]]></name>
    <configKey><![CDATA[Checker/Translation]]></configKey>
    <category name="Maintainability"/>
    <description>
      <![CDATA[Ensures the correct translation of code by checking property files for consistency regarding their keys. Two property files describing one and the same context are consistent if they contain the same keys.]]></description>
    <param key="fileExtensions" type="s{}">
      <description>
        <![CDATA[File type extension to identify translation files. Setting this property is typically only required if your translation files are preprocessed and the original files do not have the extension .properties.]]></description>

    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.naming.TypeNameCheck" priority="MAJOR">
    <name><![CDATA[Type Name]]></name>
    <configKey><![CDATA[Checker/TreeWalker/TypeName]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks that type names conform to a format specified by the format property.]]></description>
    <param key="format" type="r">
      <description><![CDATA[Validates identifiers for classes and interfaces]]></description>
    </param>
    <param key="tokens" type="s[CLASS_DEF,INTERFACE_DEF]">
      <description><![CDATA[Control whether the check applies to classes or interfaces]]></description>

    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck" priority="MAJOR">
    <name><![CDATA[Typecast Paren Pad]]></name>
    <configKey><![CDATA[Checker/TreeWalker/TypecastParenPad]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks the padding of parentheses for typecasts.]]></description>
    <param key="option" type="s[nospace,space]">
      <description><![CDATA[policy on how to pad parentheses]]></description>

    </param>
    <param key="tokens" type="s[TYPECAST,RPAREN]">
      <description><![CDATA[tokens to check]]></description>

    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.UncommentedMainCheck" priority="MAJOR">
    <name><![CDATA[Uncommented Main]]></name>
    <configKey><![CDATA[Checker/TreeWalker/UncommentedMain]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Detects uncommented main methods.]]></description>
    <param key="excludedClasses" type="r">
      <description><![CDATA[pattern for qualified names of classes which are allowed to have a main method.]]></description>

    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.coding.UnnecessaryParenthesesCheck" priority="MINOR">
    <name><![CDATA[Unnecessary Parentheses]]></name>
    <configKey><![CDATA[Checker/TreeWalker/UnnecessaryParentheses]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks if unnecessary parentheses are used in a statement or expression.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.imports.UnusedImportsCheck" priority="INFO">
    <name><![CDATA[Unused Imports]]></name>
    <configKey><![CDATA[Checker/TreeWalker/UnusedImports]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[Checks for unused import statements.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.UpperEllCheck" priority="MINOR">
    <name><![CDATA[Upper Ell]]></name>
    <configKey><![CDATA[Checker/TreeWalker/UpperEll]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks that long constants are defined with an upper ell.]]></description>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.design.VisibilityModifierCheck" priority="MAJOR">
    <name><![CDATA[Visibility Modifier]]></name>
    <configKey><![CDATA[Checker/TreeWalker/VisibilityModifier]]></configKey>
    <category name="Maintainability"/>
    <description>
      <![CDATA[Checks visibility of class members. Only static final members may be public; other class members must be private unless property protectedAllowed or packageAllowed is set.]]></description>
    <param key="packageAllowed" type="b">
      <description><![CDATA[whether package visible members are allowed. Default is true.]]></description>
    </param>
    <param key="protectedAllowed" type="b">
      <description><![CDATA[whether protected members are allowed. Default is true.]]></description>
    </param>
    <param key="publicMemberPattern" type="r">
      <description><![CDATA[pattern for public members that should be ignored. Default is ^serialVersionUID$.]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck" priority="MINOR">
    <name><![CDATA[Whitespace After]]></name>
    <configKey><![CDATA[Checker/TreeWalker/WhitespaceAfter]]></configKey>
    <category name="Usability"/>
    <description>
      <![CDATA[Checks that a token is followed by whitespace, with the exception that it does not check for whitespace after the semicolon of an empty for iterator.]]></description>
    <param key="tokens" type="s[COMMA,SEMI,TYPECAST]">
      <description><![CDATA[tokens to check]]></description>
    </param>
  </rule>
  <rule key="com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck" priority="MINOR">
    <name><![CDATA[Whitespace Around]]></name>
    <configKey><![CDATA[Checker/TreeWalker/WhitespaceAround]]></configKey>
    <category name="Usability"/>
    <description><![CDATA[Checks that a token is surrounded by whitespace.]]></description>
    <param key="tokens"
           type="s[ASSIGN,BAND,BAND_ASSIGN,BOR,BOR_ASSIGN,BSR,BSR_ASSIGN,BXOR,BXOR_ASSIGN,COLON,DIV,DIV_ASSIGN,EQUAL,GE,GT,LAND,LCURLY,LE,LITERAL_ASSERT,LITERAL_CATCH,LITERAL_DO,LITERAL_ELSE,LITERAL_FINALLY,LITERAL_FOR,LITERAL_IF,LITERAL_RETURN,LITERAL_SYNCHRONIZED,LITERAL_TRY,LITERAL_WHILE,LOR,LT,MINUS,MINUS_ASSIGN,MOD,MOD_ASSIGN,NOT_EQUAL,PLUS,PLUS_ASSIGN,QUESTION,RCURLY,SL,SLIST,SL_ASSIGN,SR,SR_ASSIGN,STAR,STAR_ASSIGN,GENERIC_START,GENERIC_END,TYPE_EXTENSION_AND,WILDCARD_TYPE]">
      <description><![CDATA[tokens to check]]></description>

    </param>
    <param key="allowEmptyConstructors" type="b">
      <description><![CDATA[allow empty constructor bodies. Default is false.]]></description>

    </param>
    <param key="allowEmptyMethods" type="b">
      <description><![CDATA[allow empty method bodies. Default is false.]]></description>
    </param>
  </rule>
    <rule key="com.puppycrawl.tools.checkstyle.checks.javadoc.WriteTagCheck" priority="MINOR">
        <name><![CDATA[Write Tag]]></name>
        <configKey><![CDATA[Checker/TreeWalker/WriteTag]]></configKey>
        <category name="Usability"/>
        <description>
            <![CDATA[Outputs a JavaDoc tag as information. Can be used e.g. with the stylesheets that sort the report by author name. To define the format for a tag, set property tagFormat to a regular expression. This check uses two different severity levels. The normal one is used for reporting when the tag is missing. The additional one (tagSeverity) is used for the level of reporting when the tag exists.]]></description>
        <param key="tag" type="s">
            <description><![CDATA[Name of tag]]></description>
        </param>
        <param key="tagFormat" type="r">
            <description><![CDATA[Format of tag]]></description>
        </param>
        <param key="tagSeverity" type="s[ignore,info,warning,error]">
            <description><![CDATA[Severity level when tag is found and printed. Default is info.]]></description>
        </param>
    </rule>
</rules>